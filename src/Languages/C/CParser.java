
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

package Languages.C;

import java_cup.runtime.*;
import Transpiler.AbstractSyntaxTree;
import Transpiler.NodeType;
import Transpiler.RuleType;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return CParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public CParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\011\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\004\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\005\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\006" +
    "\005\000\002\006\004\000\002\007\004\000\002\010\005" +
    "\000\002\010\003\000\002\011\005\000\002\012\011\000" +
    "\002\013\011\000\002\014\007\000\002\014\005\000\002" +
    "\015\007\000\002\016\005\000\002\016\003\000\002\017" +
    "\005\000\002\017\003\000\002\020\004\000\002\020\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\022\005\000\002\023\005\000\002" +
    "\024\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\003\000\002\026\005\000\002\026\005\000\002\026\003" +
    "\000\002\027\005\000\002\027\003\000\002\030\004\000" +
    "\002\030\004\000\002\030\005\000\002\030\003\000\002" +
    "\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\004\004\005\001\002\000\004\002\162\001" +
    "\002\000\004\044\006\001\002\000\004\006\007\001\002" +
    "\000\004\007\010\001\002\000\004\010\011\001\002\000" +
    "\022\005\012\014\031\015\026\016\017\022\021\024\025" +
    "\030\013\044\023\001\002\000\004\044\023\001\002\000" +
    "\004\006\155\001\002\000\032\005\ufff5\011\ufff5\014\ufff5" +
    "\015\ufff5\016\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\027" +
    "\ufff5\030\ufff5\044\ufff5\001\002\000\004\012\154\001\002" +
    "\000\006\012\152\013\151\001\002\000\004\017\143\001" +
    "\002\000\032\005\ufff3\011\ufff3\014\ufff3\015\ufff3\016\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\027\ufff3\030\ufff3\044" +
    "\ufff3\001\002\000\004\006\130\001\002\000\024\005\012" +
    "\011\127\014\031\015\026\016\017\022\021\024\025\030" +
    "\013\044\023\001\002\000\004\021\053\001\002\000\030" +
    "\005\ufffe\011\ufffe\014\ufffe\015\ufffe\016\ufffe\022\ufffe\024" +
    "\ufffe\025\ufffe\027\ufffe\030\ufffe\044\ufffe\001\002\000\004" +
    "\006\034\001\002\000\004\012\033\001\002\000\032\005" +
    "\ufff4\011\ufff4\014\ufff4\015\ufff4\016\ufff4\022\ufff4\023\ufff4" +
    "\024\ufff4\025\ufff4\027\ufff4\030\ufff4\044\ufff4\001\002\000" +
    "\006\012\uffee\013\uffee\001\002\000\004\012\032\001\002" +
    "\000\032\005\ufff8\011\ufff8\014\ufff8\015\ufff8\016\ufff8\022" +
    "\ufff8\023\ufff8\024\ufff8\025\ufff8\027\ufff8\030\ufff8\044\ufff8" +
    "\001\002\000\032\005\ufff7\011\ufff7\014\ufff7\015\ufff7\016" +
    "\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\027\ufff7\030\ufff7" +
    "\044\ufff7\001\002\000\004\044\035\001\002\000\004\007" +
    "\036\001\002\000\004\010\037\001\002\000\006\025\042" +
    "\027\040\001\002\000\004\026\051\001\002\000\004\011" +
    "\050\001\002\000\004\043\043\001\002\000\004\026\044" +
    "\001\002\000\022\005\012\014\031\015\026\016\017\022" +
    "\021\024\025\030\013\044\023\001\002\000\026\005\012" +
    "\014\031\015\026\016\017\022\021\024\025\025\042\027" +
    "\040\030\013\044\023\001\002\000\004\011\uffea\001\002" +
    "\000\030\005\uffff\011\uffff\014\uffff\015\uffff\016\uffff\022" +
    "\uffff\024\uffff\025\uffff\027\uffff\030\uffff\044\uffff\001\002" +
    "\000\032\005\uffeb\011\uffeb\014\uffeb\015\uffeb\016\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\027\uffeb\030\uffeb\044\uffeb" +
    "\001\002\000\022\005\012\014\031\015\026\016\017\022" +
    "\021\024\025\030\013\044\023\001\002\000\024\005\012" +
    "\011\uffe9\014\031\015\026\016\017\022\021\024\025\030" +
    "\013\044\023\001\002\000\016\006\074\033\060\036\055" +
    "\037\071\043\064\044\062\001\002\000\016\007\uffe0\012" +
    "\uffe0\013\uffe0\017\uffe0\031\uffe0\032\uffe0\001\002\000\006" +
    "\043\064\044\062\001\002\000\030\007\uffde\012\uffde\013" +
    "\uffde\017\uffde\020\114\031\uffde\032\uffde\034\115\035\116" +
    "\036\117\037\120\001\002\000\016\007\uffe6\012\uffe6\013" +
    "\uffe6\017\uffe6\031\uffe6\032\102\001\002\000\016\006\074" +
    "\033\060\036\055\037\071\043\064\044\062\001\002\000" +
    "\016\007\uffe1\012\uffe1\013\uffe1\017\uffe1\031\uffe1\032\uffe1" +
    "\001\002\000\036\007\uffce\012\uffce\013\uffce\017\uffce\020" +
    "\uffce\031\uffce\032\uffce\034\uffce\035\uffce\036\uffce\037\uffce" +
    "\040\uffce\041\uffce\042\uffce\001\002\000\016\007\uffdf\012" +
    "\uffdf\013\uffdf\017\uffdf\031\uffdf\032\uffdf\001\002\000\036" +
    "\007\uffcd\012\uffcd\013\uffcd\017\uffcd\020\uffcd\031\uffcd\032" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\042\uffcd\001\002\000\036\007\uffd3\012\uffd3\013\uffd3\017" +
    "\uffd3\020\uffd3\031\uffd3\032\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\042\uffd3\001\002\000\034\007" +
    "\uffd8\012\uffd8\013\uffd8\017\uffd8\020\uffd8\031\uffd8\032\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\110\041\107\001" +
    "\002\000\016\007\uffe4\012\uffe4\013\uffe4\017\uffe4\031\uffe4" +
    "\032\uffe4\001\002\000\036\007\uffcf\012\uffcf\013\uffcf\017" +
    "\uffcf\020\uffcf\031\uffcf\032\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\041\uffcf\042\uffcf\001\002\000\006\043" +
    "\064\044\062\001\002\000\010\012\uffed\013\uffed\031\100" +
    "\001\002\000\036\007\uffd5\012\uffd5\013\uffd5\017\uffd5\020" +
    "\uffd5\031\uffd5\032\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\104\001\002\000\016\006\074\033" +
    "\060\036\055\037\071\043\064\044\062\001\002\000\016" +
    "\007\uffe2\012\uffe2\013\uffe2\017\uffe2\031\uffe2\032\uffe2\001" +
    "\002\000\006\007\077\031\100\001\002\000\036\007\uffd0" +
    "\012\uffd0\013\uffd0\017\uffd0\020\uffd0\031\uffd0\032\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0" +
    "\001\002\000\016\006\074\033\060\036\055\037\071\043" +
    "\064\044\062\001\002\000\016\007\uffe7\012\uffe7\013\uffe7" +
    "\017\uffe7\031\uffe7\032\102\001\002\000\016\006\074\033" +
    "\060\036\055\037\071\043\064\044\062\001\002\000\016" +
    "\007\uffe5\012\uffe5\013\uffe5\017\uffe5\031\uffe5\032\uffe5\001" +
    "\002\000\014\006\074\036\055\037\071\043\064\044\062" +
    "\001\002\000\036\007\uffd4\012\uffd4\013\uffd4\017\uffd4\020" +
    "\uffd4\031\uffd4\032\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\001\002\000\036\007\uffd1\012" +
    "\uffd1\013\uffd1\017\uffd1\020\uffd1\031\uffd1\032\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\001" +
    "\002\000\014\006\074\036\055\037\071\043\064\044\062" +
    "\001\002\000\014\006\074\036\055\037\071\043\064\044" +
    "\062\001\002\000\036\007\uffd7\012\uffd7\013\uffd7\017\uffd7" +
    "\020\uffd7\031\uffd7\032\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\042\104\001\002\000\036\007\uffd6" +
    "\012\uffd6\013\uffd6\017\uffd6\020\uffd6\031\uffd6\032\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\104" +
    "\001\002\000\016\007\uffe3\012\uffe3\013\uffe3\017\uffe3\031" +
    "\uffe3\032\uffe3\001\002\000\014\006\074\036\055\037\071" +
    "\043\064\044\062\001\002\000\014\006\074\036\055\037" +
    "\071\043\064\044\062\001\002\000\014\006\074\036\055" +
    "\037\071\043\064\044\062\001\002\000\014\006\074\036" +
    "\055\037\071\043\064\044\062\001\002\000\014\006\074" +
    "\036\055\037\071\043\064\044\062\001\002\000\034\007" +
    "\uffd9\012\uffd9\013\uffd9\017\uffd9\020\uffd9\031\uffd9\032\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\110\041\107\001" +
    "\002\000\034\007\uffda\012\uffda\013\uffda\017\uffda\020\uffda" +
    "\031\uffda\032\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040" +
    "\110\041\107\001\002\000\022\007\uffdb\012\uffdb\013\uffdb" +
    "\017\uffdb\031\uffdb\032\uffdb\036\117\037\120\001\002\000" +
    "\022\007\uffdc\012\uffdc\013\uffdc\017\uffdc\031\uffdc\032\uffdc" +
    "\036\117\037\120\001\002\000\022\007\uffdd\012\uffdd\013" +
    "\uffdd\017\uffdd\031\uffdd\032\uffdd\036\117\037\120\001\002" +
    "\000\036\007\uffd2\012\uffd2\013\uffd2\017\uffd2\020\uffd2\031" +
    "\uffd2\032\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\001\002\000\004\002\000\001\002\000" +
    "\016\006\074\033\060\036\055\037\071\043\064\044\062" +
    "\001\002\000\006\007\132\031\100\001\002\000\024\005" +
    "\012\010\135\014\031\015\026\016\017\022\021\024\025" +
    "\030\013\044\023\001\002\000\004\023\141\001\002\000" +
    "\032\005\ufffc\011\ufffc\014\ufffc\015\ufffc\016\ufffc\022\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\027\ufffc\030\ufffc\044\ufffc\001" +
    "\002\000\024\005\012\011\137\014\031\015\026\016\017" +
    "\022\021\024\025\030\013\044\023\001\002\000\024\005" +
    "\012\011\140\014\031\015\026\016\017\022\021\024\025" +
    "\030\013\044\023\001\002\000\032\005\ufffb\011\ufffb\014" +
    "\ufffb\015\ufffb\016\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb" +
    "\027\ufffb\030\ufffb\044\ufffb\001\002\000\032\005\ufffd\011" +
    "\ufffd\014\ufffd\015\ufffd\016\ufffd\022\ufffd\023\ufffd\024\ufffd" +
    "\025\ufffd\027\ufffd\030\ufffd\044\ufffd\001\002\000\024\005" +
    "\012\010\135\014\031\015\026\016\017\022\021\024\025" +
    "\030\013\044\023\001\002\000\032\005\uffec\011\uffec\014" +
    "\uffec\015\uffec\016\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\027\uffec\030\uffec\044\uffec\001\002\000\016\006\074\033" +
    "\060\036\055\037\071\043\064\044\062\001\002\000\006" +
    "\012\146\017\145\001\002\000\016\006\074\033\060\036" +
    "\055\037\071\043\064\044\062\001\002\000\032\005\ufff6" +
    "\011\ufff6\014\ufff6\015\ufff6\016\ufff6\022\ufff6\023\ufff6\024" +
    "\ufff6\025\ufff6\027\ufff6\030\ufff6\044\ufff6\001\002\000\010" +
    "\012\ufff2\017\ufff2\031\100\001\002\000\010\012\ufff1\017" +
    "\ufff1\031\100\001\002\000\004\044\023\001\002\000\032" +
    "\005\ufff9\011\ufff9\014\ufff9\015\ufff9\016\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\025\ufff9\027\ufff9\030\ufff9\044\ufff9\001\002" +
    "\000\006\012\uffef\013\uffef\001\002\000\032\005\ufffa\011" +
    "\ufffa\014\ufffa\015\ufffa\016\ufffa\022\ufffa\023\ufffa\024\ufffa" +
    "\025\ufffa\027\ufffa\030\ufffa\044\ufffa\001\002\000\016\006" +
    "\074\033\060\036\055\037\071\043\064\044\062\001\002" +
    "\000\006\007\157\031\100\001\002\000\024\005\012\010" +
    "\135\014\031\015\026\016\017\022\021\024\025\030\013" +
    "\044\023\001\002\000\032\005\uffe8\011\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\027\uffe8" +
    "\030\uffe8\044\uffe8\001\002\000\006\012\ufff0\013\151\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\021\005\023\007\014\010\015\011" +
    "\027\012\013\013\026\015\017\001\001\000\006\010\160" +
    "\011\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\046\007" +
    "\014\010\015\011\027\012\013\013\026\015\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\044\005\023\007\014" +
    "\010\015\011\027\012\013\013\026\015\017\001\001\000" +
    "\022\005\046\007\014\010\015\011\027\012\013\013\026" +
    "\014\045\015\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\051\005\023\007\014" +
    "\010\015\011\027\012\013\013\026\015\017\001\001\000" +
    "\020\005\046\007\014\010\015\011\027\012\013\013\026" +
    "\015\017\001\001\000\032\016\071\017\056\020\066\021" +
    "\074\022\060\023\053\024\062\025\055\026\065\027\072" +
    "\030\064\031\067\001\001\000\002\001\001\000\004\031" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\020\112\021\074\022\060\023\053\024\062\025\055\026" +
    "\065\027\072\030\064\031\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\016\075\017\056\020\066\021\074" +
    "\022\060\023\053\024\062\025\055\026\065\027\072\030" +
    "\064\031\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\017\100\020\066\021\074\022" +
    "\060\023\053\024\062\025\055\026\065\027\072\030\064" +
    "\031\067\001\001\000\002\001\001\000\026\020\102\021" +
    "\074\022\060\023\053\024\062\025\055\026\065\027\072" +
    "\030\064\031\067\001\001\000\002\001\001\000\006\030" +
    "\104\031\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\027\111\030\064\031\067\001\001\000\010\027" +
    "\110\030\064\031\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\025\124\026\065\027" +
    "\072\030\064\031\067\001\001\000\014\025\123\026\065" +
    "\027\072\030\064\031\067\001\001\000\014\025\122\026" +
    "\065\027\072\030\064\031\067\001\001\000\012\026\121" +
    "\027\072\030\064\031\067\001\001\000\012\026\120\027" +
    "\072\030\064\031\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\016\130" +
    "\017\056\020\066\021\074\022\060\023\053\024\062\025" +
    "\055\026\065\027\072\030\064\031\067\001\001\000\002" +
    "\001\001\000\022\004\132\005\133\007\014\010\015\011" +
    "\027\012\013\013\026\015\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\135\005\023\007\014\010" +
    "\015\011\027\012\013\013\026\015\017\001\001\000\020" +
    "\005\046\007\014\010\015\011\027\012\013\013\026\015" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\141\005\133\007\014\010\015\011\027\012\013\013" +
    "\026\015\017\001\001\000\002\001\001\000\032\016\147" +
    "\017\056\020\066\021\074\022\060\023\053\024\062\025" +
    "\055\026\065\027\072\030\064\031\067\001\001\000\002" +
    "\001\001\000\032\016\146\017\056\020\066\021\074\022" +
    "\060\023\053\024\062\025\055\026\065\027\072\030\064" +
    "\031\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\016\155\017" +
    "\056\020\066\021\074\022\060\023\053\024\062\025\055" +
    "\026\065\027\072\030\064\031\067\001\001\000\002\001" +
    "\001\000\022\004\157\005\133\007\014\010\015\011\027" +
    "\012\013\013\026\015\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CParser$actions {
  private final CParser parser;

  /** Constructor */
  CUP$CParser$actions(CParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action_part00000000(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CParser$result;

      /* select the action based on the action number */
      switch (CUP$CParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		AbstractSyntaxTree start_val = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		RESULT = start_val;
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CParser$parser.done_parsing();
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= VOID ID LPAR RPAR LBRACKET statements RBRACKET 
            {
              AbstractSyntaxTree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		 AbstractSyntaxTree idNode = new AbstractSyntaxTree(NodeType.ID, i);
                           RESULT = new AbstractSyntaxTree(NodeType.PROGRAM, RuleType.DEFAULT, idNode, s); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statements ::= statements statement 
            {
              AbstractSyntaxTree RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		AbstractSyntaxTree ss = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.STATEMENTS, RuleType.MULTI, ss, s); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= statement 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.STATEMENTS, RuleType.SINGLE, s); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // follow_statements ::= LBRACKET statements RBRACKET 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		 RESULT = new AbstractSyntaxTree(NodeType.FOLLOW_STATEMENTS, RuleType.MULTI, s); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("follow_statements",2, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // follow_statements ::= statement 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.FOLLOW_STATEMENTS, RuleType.SINGLE, s); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("follow_statements",2, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // follow_statements ::= LBRACKET RBRACKET 
            {
              AbstractSyntaxTree RESULT =null;
		 RESULT = new AbstractSyntaxTree(NodeType.FOLLOW_STATEMENTS, RuleType.EMPTY); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("follow_statements",2, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= declaration_stmt SEMICOLON 
            {
              AbstractSyntaxTree RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		AbstractSyntaxTree d = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		 RESULT = new AbstractSyntaxTree(NodeType.STATEMENT, RuleType.DECLARE, d); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= assignment_stmts SEMICOLON 
            {
              AbstractSyntaxTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		AbstractSyntaxTree a = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		 RESULT = new AbstractSyntaxTree(NodeType.STATEMENT, RuleType.ASSIGNMENTS, a); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= BREAK SEMICOLON 
            {
              AbstractSyntaxTree RESULT =null;
		 RESULT = new AbstractSyntaxTree(NodeType.STATEMENT, RuleType.BREAK); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= CONTINUE SEMICOLON 
            {
              AbstractSyntaxTree RESULT =null;
		 RESULT = new AbstractSyntaxTree(NodeType.STATEMENT, RuleType.CONTINUE); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= COUT printable SEMICOLON 
            {
              AbstractSyntaxTree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		AbstractSyntaxTree p = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		 RESULT = new AbstractSyntaxTree(NodeType.STATEMENT, RuleType.PRINT, p); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= if_stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree i = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.STATEMENT, RuleType.IF, i); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= switch_stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.STATEMENT, RuleType.SWITCH, s); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= while_stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree w = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.STATEMENT, RuleType.WHILE, w); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // printable ::= printable OUTPUT disjunction 
            {
              AbstractSyntaxTree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		AbstractSyntaxTree p = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree d = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.PRINT, RuleType.MULTI, p, d); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("printable",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // printable ::= OUTPUT disjunction 
            {
              AbstractSyntaxTree RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree d = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.PRINT, RuleType.SINGLE, d); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("printable",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration_stmt ::= INT assignment_stmts 
            {
              AbstractSyntaxTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree a = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.DECLARATION, RuleType.DEFAULT, a); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",5, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // assignment_stmts ::= assignment_stmts COMMA assignment_stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		AbstractSyntaxTree as = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree a = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.ASSIGNMENTS, RuleType.MULTI, as, a); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("assignment_stmts",6, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // assignment_stmts ::= assignment_stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree a = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.ASSIGNMENTS, RuleType.SINGLE, a); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("assignment_stmts",6, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // assignment_stmt ::= ID EQUAL disjunction 
            {
              AbstractSyntaxTree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree d = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 AbstractSyntaxTree idNode = new AbstractSyntaxTree(NodeType.ID, i);
                           RESULT = new AbstractSyntaxTree(NodeType.ASSIGNMENT, RuleType.DEFAULT, idNode, d); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",7, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // if_stmt ::= IF LPAR disjunction RPAR follow_statements ELSE follow_statements 
            {
              AbstractSyntaxTree RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		AbstractSyntaxTree d = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		AbstractSyntaxTree f1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree f2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.IF, RuleType.DEFAULT, d, f1, f2); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("if_stmt",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // switch_stmt ::= SWITCH LPAR ID RPAR LBRACKET cases RBRACKET 
            {
              AbstractSyntaxTree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		AbstractSyntaxTree c = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		 AbstractSyntaxTree idNode = new AbstractSyntaxTree(NodeType.ID, i);
                           RESULT = new AbstractSyntaxTree(NodeType.SWITCH, RuleType.DEFAULT, idNode, c); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("switch_stmt",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cases ::= CASE NUM COLON statements cases 
            {
              AbstractSyntaxTree RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree c = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 AbstractSyntaxTree numNode = new AbstractSyntaxTree(NodeType.NUM, n);
                           RESULT = new AbstractSyntaxTree(NodeType.CASES, RuleType.MULTI, numNode, s, c); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("cases",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cases ::= DEFAULT COLON statements 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.CASES, RuleType.DEFAULT, s); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("cases",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // while_stmt ::= WHILE LPAR disjunction RPAR follow_statements 
            {
              AbstractSyntaxTree RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		AbstractSyntaxTree d = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree f = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.WHILE, RuleType.DEFAULT, d, f); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("while_stmt",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // disjunction ::= disjunction OR conjunction 
            {
              AbstractSyntaxTree RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		AbstractSyntaxTree d = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree c = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.DISJUNCTION, RuleType.MULTI, d, c); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("disjunction",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // disjunction ::= conjunction 
            {
              AbstractSyntaxTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree c = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.DISJUNCTION, RuleType.SINGLE, c); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("disjunction",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // conjunction ::= conjunction AND inversion 
            {
              AbstractSyntaxTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		AbstractSyntaxTree c = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree i = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.CONJUNCTION, RuleType.MULTI, c, i); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("conjunction",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // conjunction ::= inversion 
            {
              AbstractSyntaxTree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree i = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.CONJUNCTION, RuleType.SINGLE, i); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("conjunction",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inversion ::= NOT inversion 
            {
              AbstractSyntaxTree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree i = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.INVERSION, RuleType.MULTI, i); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("inversion",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inversion ::= comparison 
            {
              AbstractSyntaxTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree c = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.INVERSION, RuleType.SINGLE, c); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("inversion",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comparison ::= eq_sum 
            {
              AbstractSyntaxTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.COMPARISON, RuleType.EQ, e); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("comparison",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comparison ::= lt_sum 
            {
              AbstractSyntaxTree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree l = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.COMPARISON, RuleType.LT, l); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("comparison",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparison ::= gt_sum 
            {
              AbstractSyntaxTree RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree g = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.COMPARISON, RuleType.GT, g); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("comparison",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparison ::= sum 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.COMPARISON, RuleType.DEFAULT, s); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("comparison",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // eq_sum ::= sum EQ sum 
            {
              AbstractSyntaxTree RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		AbstractSyntaxTree s1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree s2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.EQ, RuleType.DEFAULT, s1, s2); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("eq_sum",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lt_sum ::= sum LT sum 
            {
              AbstractSyntaxTree RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		AbstractSyntaxTree s1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree s2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.LT, RuleType.DEFAULT, s1, s2); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("lt_sum",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // gt_sum ::= sum GT sum 
            {
              AbstractSyntaxTree RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		AbstractSyntaxTree s1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree s2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.GT, RuleType.DEFAULT, s1, s2); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gt_sum",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sum ::= sum PLUS term 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree t = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.SUM, RuleType.ADD, s, t); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("sum",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sum ::= sum MINUS term 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree t = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.SUM, RuleType.SUB, s, t); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("sum",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sum ::= term 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree t = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.SUM, RuleType.DEFAULT, t); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("sum",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // term ::= term TIMES modulo 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		AbstractSyntaxTree t = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree m = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.TERM, RuleType.TIMES, t, m); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // term ::= term DIVIDES modulo 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		AbstractSyntaxTree t = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree m = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.TERM, RuleType.DIVIDES, t, m); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // term ::= modulo 
            {
              AbstractSyntaxTree RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree m = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.TERM, RuleType.DEFAULT, m); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // modulo ::= modulo MOD factor 
            {
              AbstractSyntaxTree RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		AbstractSyntaxTree m = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree f = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.MODULO, RuleType.MULTI, m, f); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("modulo",21, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // modulo ::= factor 
            {
              AbstractSyntaxTree RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree f = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.MODULO, RuleType.SINGLE, f); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("modulo",21, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= PLUS primary 
            {
              AbstractSyntaxTree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree p = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.FACTOR, RuleType.POSITIVE, p); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= MINUS primary 
            {
              AbstractSyntaxTree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree p = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.FACTOR, RuleType.NEGATIVE, p); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= LPAR disjunction RPAR 
            {
              AbstractSyntaxTree RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		AbstractSyntaxTree d = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		 RESULT = new AbstractSyntaxTree(NodeType.FACTOR, RuleType.PAR, d); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= primary 
            {
              AbstractSyntaxTree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		AbstractSyntaxTree p = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.FACTOR, RuleType.DEFAULT, p); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // primary ::= ID 
            {
              AbstractSyntaxTree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 AbstractSyntaxTree idNode = new AbstractSyntaxTree(NodeType.ID, i);
                           RESULT = new AbstractSyntaxTree(NodeType.PRIMARY, RuleType.VARIABLE, idNode); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("primary",23, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // primary ::= NUM 
            {
              AbstractSyntaxTree RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 AbstractSyntaxTree numNode = new AbstractSyntaxTree(NodeType.NUM, n);
                           RESULT = new AbstractSyntaxTree(NodeType.PRIMARY, RuleType.CONSTANT, numNode); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("primary",23, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
              return CUP$CParser$do_action_part00000000(
                               CUP$CParser$act_num,
                               CUP$CParser$parser,
                               CUP$CParser$stack,
                               CUP$CParser$top);
    }
}

}
