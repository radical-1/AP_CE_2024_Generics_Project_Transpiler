
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

package Languages.Rust;

import java_cup.runtime.*;
import Transpiler.AbstractSyntaxTree;
import Transpiler.NodeType;
import Transpiler.RuleType;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class RustParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return RustParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public RustParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public RustParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public RustParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\011\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\004\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\007\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\006" +
    "\004\000\002\007\005\000\002\010\011\000\002\011\007" +
    "\000\002\012\007\000\002\012\005\000\002\017\005\000" +
    "\002\017\003\000\002\013\007\000\002\014\005\000\002" +
    "\014\003\000\002\015\005\000\002\015\003\000\002\016" +
    "\004\000\002\016\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\021\005\000" +
    "\002\022\005\000\002\023\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\003\000\002\025\005\000\002\025" +
    "\005\000\002\025\003\000\002\026\005\000\002\026\003" +
    "\000\002\027\004\000\002\027\004\000\002\027\005\000" +
    "\002\027\003\000\002\030\003\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\004\004\005\001\002\000\004\002\156\001" +
    "\002\000\004\043\006\001\002\000\004\006\007\001\002" +
    "\000\004\007\010\001\002\000\004\010\011\001\002\000" +
    "\022\005\025\014\030\015\026\016\024\021\020\023\014" +
    "\025\012\043\022\001\002\000\004\006\152\001\002\000" +
    "\030\005\ufff5\011\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\021\ufff5\022\ufff5\023\ufff5\025\ufff5\043\ufff5\001\002\000" +
    "\004\043\133\001\002\000\004\012\132\001\002\000\030" +
    "\005\ufff4\011\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\021" +
    "\ufff4\022\ufff4\023\ufff4\025\ufff4\043\ufff4\001\002\000\030" +
    "\005\ufff3\011\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\025\ufff3\043\ufff3\001\002\000\004" +
    "\006\117\001\002\000\024\005\025\011\115\014\030\015" +
    "\026\016\024\021\020\023\014\025\012\043\022\001\002" +
    "\000\004\020\113\001\002\000\024\005\ufffe\011\ufffe\014" +
    "\ufffe\015\ufffe\016\ufffe\021\ufffe\023\ufffe\025\ufffe\043\ufffe" +
    "\001\002\000\004\006\035\001\002\000\004\043\022\001" +
    "\002\000\004\012\033\001\002\000\004\012\032\001\002" +
    "\000\004\012\031\001\002\000\030\005\ufff8\011\ufff8\013" +
    "\ufff8\014\ufff8\015\ufff8\016\ufff8\021\ufff8\022\ufff8\023\ufff8" +
    "\025\ufff8\043\ufff8\001\002\000\030\005\ufff9\011\ufff9\013" +
    "\ufff9\014\ufff9\015\ufff9\016\ufff9\021\ufff9\022\ufff9\023\ufff9" +
    "\025\ufff9\043\ufff9\001\002\000\030\005\ufff7\011\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\025\ufff7\043\ufff7\001\002\000\004\012\ufff2\001\002\000" +
    "\016\006\056\030\042\033\040\034\053\042\046\043\044" +
    "\001\002\000\012\007\uffe2\012\uffe2\026\uffe2\027\uffe2\001" +
    "\002\000\024\007\uffe0\012\uffe0\017\101\026\uffe0\027\uffe0" +
    "\031\102\032\103\033\104\034\105\001\002\000\006\042" +
    "\046\043\044\001\002\000\012\007\uffe8\012\uffe8\026\uffe8" +
    "\027\064\001\002\000\016\006\056\030\042\033\040\034" +
    "\053\042\046\043\044\001\002\000\012\007\uffe3\012\uffe3" +
    "\026\uffe3\027\uffe3\001\002\000\032\007\uffd0\012\uffd0\017" +
    "\uffd0\026\uffd0\027\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\001\002\000\012\007\uffe1\012" +
    "\uffe1\026\uffe1\027\uffe1\001\002\000\032\007\uffcf\012\uffcf" +
    "\017\uffcf\026\uffcf\027\uffcf\031\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\001\002\000\032\007\uffd5" +
    "\012\uffd5\017\uffd5\026\uffd5\027\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\001\002\000\030" +
    "\007\uffda\012\uffda\017\uffda\026\uffda\027\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\074\036\073\001\002\000\012" +
    "\007\uffe6\012\uffe6\026\uffe6\027\uffe6\001\002\000\032\007" +
    "\uffd1\012\uffd1\017\uffd1\026\uffd1\027\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\001\002\000" +
    "\006\042\046\043\044\001\002\000\006\007\070\026\062" +
    "\001\002\000\032\007\uffd7\012\uffd7\017\uffd7\026\uffd7\027" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\037\066\001\002\000\016\006\056\030\042\033\040\034" +
    "\053\042\046\043\044\001\002\000\012\007\uffe4\012\uffe4" +
    "\026\uffe4\027\uffe4\001\002\000\006\007\061\026\062\001" +
    "\002\000\032\007\uffd2\012\uffd2\017\uffd2\026\uffd2\027\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\001\002\000\016\006\056\030\042\033\040\034\053" +
    "\042\046\043\044\001\002\000\012\007\uffe9\012\uffe9\026" +
    "\uffe9\027\064\001\002\000\016\006\056\030\042\033\040" +
    "\034\053\042\046\043\044\001\002\000\012\007\uffe7\012" +
    "\uffe7\026\uffe7\027\uffe7\001\002\000\014\006\056\033\040" +
    "\034\053\042\046\043\044\001\002\000\032\007\uffd6\012" +
    "\uffd6\017\uffd6\026\uffd6\027\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\001\002\000\004\012" +
    "\071\001\002\000\030\005\ufff6\011\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\016\ufff6\021\ufff6\022\ufff6\023\ufff6\025\ufff6\043" +
    "\ufff6\001\002\000\032\007\uffd3\012\uffd3\017\uffd3\026\uffd3" +
    "\027\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\001\002\000\014\006\056\033\040\034\053" +
    "\042\046\043\044\001\002\000\014\006\056\033\040\034" +
    "\053\042\046\043\044\001\002\000\032\007\uffd9\012\uffd9" +
    "\017\uffd9\026\uffd9\027\uffd9\031\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\066\001\002\000\032\007\uffd8" +
    "\012\uffd8\017\uffd8\026\uffd8\027\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\037\066\001\002\000\012" +
    "\007\uffe5\012\uffe5\026\uffe5\027\uffe5\001\002\000\032\007" +
    "\uffd4\012\uffd4\017\uffd4\026\uffd4\027\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\001\002\000" +
    "\014\006\056\033\040\034\053\042\046\043\044\001\002" +
    "\000\014\006\056\033\040\034\053\042\046\043\044\001" +
    "\002\000\014\006\056\033\040\034\053\042\046\043\044" +
    "\001\002\000\014\006\056\033\040\034\053\042\046\043" +
    "\044\001\002\000\014\006\056\033\040\034\053\042\046" +
    "\043\044\001\002\000\030\007\uffdb\012\uffdb\017\uffdb\026" +
    "\uffdb\027\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\074" +
    "\036\073\001\002\000\030\007\uffdc\012\uffdc\017\uffdc\026" +
    "\uffdc\027\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\074" +
    "\036\073\001\002\000\016\007\uffdd\012\uffdd\026\uffdd\027" +
    "\uffdd\033\104\034\105\001\002\000\016\007\uffde\012\uffde" +
    "\026\uffde\027\uffde\033\104\034\105\001\002\000\016\007" +
    "\uffdf\012\uffdf\026\uffdf\027\uffdf\033\104\034\105\001\002" +
    "\000\016\006\056\030\042\033\040\034\053\042\046\043" +
    "\044\001\002\000\006\012\ufff1\026\062\001\002\000\004" +
    "\002\000\001\002\000\024\005\uffff\011\uffff\014\uffff\015" +
    "\uffff\016\uffff\021\uffff\023\uffff\025\uffff\043\uffff\001\002" +
    "\000\016\006\056\030\042\033\040\034\053\042\046\043" +
    "\044\001\002\000\006\007\121\026\062\001\002\000\024" +
    "\005\025\010\124\014\030\015\026\016\024\021\020\023" +
    "\014\025\012\043\022\001\002\000\004\022\130\001\002" +
    "\000\030\005\ufffc\011\ufffc\013\ufffc\014\ufffc\015\ufffc\016" +
    "\ufffc\021\ufffc\022\ufffc\023\ufffc\025\ufffc\043\ufffc\001\002" +
    "\000\024\005\025\011\126\014\030\015\026\016\024\021" +
    "\020\023\014\025\012\043\022\001\002\000\024\005\025" +
    "\011\127\014\030\015\026\016\024\021\020\023\014\025" +
    "\012\043\022\001\002\000\030\005\ufffb\011\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\016\ufffb\021\ufffb\022\ufffb\023\ufffb\025" +
    "\ufffb\043\ufffb\001\002\000\030\005\ufffd\011\ufffd\013\ufffd" +
    "\014\ufffd\015\ufffd\016\ufffd\021\ufffd\022\ufffd\023\ufffd\025" +
    "\ufffd\043\ufffd\001\002\000\024\005\025\010\124\014\030" +
    "\015\026\016\024\021\020\023\014\025\012\043\022\001" +
    "\002\000\030\005\ufff0\011\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\021\ufff0\022\ufff0\023\ufff0\025\ufff0\043\ufff0\001" +
    "\002\000\030\005\ufffa\011\ufffa\013\ufffa\014\ufffa\015\ufffa" +
    "\016\ufffa\021\ufffa\022\ufffa\023\ufffa\025\ufffa\043\ufffa\001" +
    "\002\000\004\010\134\001\002\000\006\024\136\042\135" +
    "\001\002\000\006\040\uffeb\041\uffeb\001\002\000\004\040" +
    "\150\001\002\000\006\040\143\041\142\001\002\000\004" +
    "\011\141\001\002\000\030\005\uffef\011\uffef\013\uffef\014" +
    "\uffef\015\uffef\016\uffef\021\uffef\022\uffef\023\uffef\025\uffef" +
    "\043\uffef\001\002\000\004\042\147\001\002\000\024\005" +
    "\025\010\124\014\030\015\026\016\024\021\020\023\014" +
    "\025\012\043\022\001\002\000\004\013\145\001\002\000" +
    "\006\024\136\042\135\001\002\000\004\011\uffee\001\002" +
    "\000\006\040\uffec\041\uffec\001\002\000\024\005\025\010" +
    "\124\014\030\015\026\016\024\021\020\023\014\025\012" +
    "\043\022\001\002\000\004\011\uffed\001\002\000\016\006" +
    "\056\030\042\033\040\034\053\042\046\043\044\001\002" +
    "\000\006\007\154\026\062\001\002\000\024\005\025\010" +
    "\124\014\030\015\026\016\024\021\020\023\014\025\012" +
    "\043\022\001\002\000\030\005\uffea\011\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\021\uffea\022\uffea\023\uffea\025\uffea" +
    "\043\uffea\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\020\005\022\006\014\007\026\010" +
    "\012\011\015\013\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\115" +
    "\006\014\007\026\010\012\011\015\013\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\014\053\015\040\016" +
    "\050\020\056\021\042\022\035\023\044\024\036\025\047" +
    "\026\054\027\046\030\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\077\001\001\000\002\001\001" +
    "\000\026\016\076\020\056\021\042\022\035\023\044\024" +
    "\036\025\047\026\054\027\046\030\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\014\057\015\040\016\050" +
    "\020\056\021\042\022\035\023\044\024\036\025\047\026" +
    "\054\027\046\030\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\015\062\016\050\020" +
    "\056\021\042\022\035\023\044\024\036\025\047\026\054" +
    "\027\046\030\051\001\001\000\002\001\001\000\026\016" +
    "\064\020\056\021\042\022\035\023\044\024\036\025\047" +
    "\026\054\027\046\030\051\001\001\000\002\001\001\000" +
    "\006\027\066\030\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\075\027\046\030\051\001\001\000\010\026\074\027\046" +
    "\030\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\024\111\025\047" +
    "\026\054\027\046\030\051\001\001\000\014\024\110\025" +
    "\047\026\054\027\046\030\051\001\001\000\014\024\107" +
    "\025\047\026\054\027\046\030\051\001\001\000\012\025" +
    "\106\026\054\027\046\030\051\001\001\000\012\025\105" +
    "\026\054\027\046\030\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\014\113\015\040\016\050\020\056\021" +
    "\042\022\035\023\044\024\036\025\047\026\054\027\046" +
    "\030\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\014\117\015\040\016\050\020\056" +
    "\021\042\022\035\023\044\024\036\025\047\026\054\027" +
    "\046\030\051\001\001\000\002\001\001\000\020\004\121" +
    "\005\122\006\014\007\026\010\012\011\015\013\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\124" +
    "\005\022\006\014\007\026\010\012\011\015\013\016\001" +
    "\001\000\016\005\115\006\014\007\026\010\012\011\015" +
    "\013\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\130\005\122\006\014\007\026\010\012\011\015" +
    "\013\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\137\017\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\143" +
    "\005\122\006\014\007\026\010\012\011\015\013\016\001" +
    "\001\000\002\001\001\000\006\012\145\017\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\150\005" +
    "\122\006\014\007\026\010\012\011\015\013\016\001\001" +
    "\000\002\001\001\000\032\014\152\015\040\016\050\020" +
    "\056\021\042\022\035\023\044\024\036\025\047\026\054" +
    "\027\046\030\051\001\001\000\002\001\001\000\020\004" +
    "\154\005\122\006\014\007\026\010\012\011\015\013\016" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$RustParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$RustParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$RustParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$RustParser$actions {
  private final RustParser parser;

  /** Constructor */
  CUP$RustParser$actions(RustParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$RustParser$do_action_part00000000(
    int                        CUP$RustParser$act_num,
    java_cup.runtime.lr_parser CUP$RustParser$parser,
    java.util.Stack            CUP$RustParser$stack,
    int                        CUP$RustParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$RustParser$result;

      /* select the action based on the action number */
      switch (CUP$RustParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).right;
		AbstractSyntaxTree start_val = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).value;
		RESULT = start_val;
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$RustParser$parser.done_parsing();
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= FUNCTION ID LPAR RPAR LBRACKET statements RBRACKET 
            {
              AbstractSyntaxTree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).value;
		 AbstractSyntaxTree idNode = new AbstractSyntaxTree(NodeType.ID, i);
                           RESULT = new AbstractSyntaxTree(NodeType.PROGRAM, RuleType.DEFAULT, idNode, s); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-6)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statements ::= statements statement 
            {
              AbstractSyntaxTree RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).right;
		AbstractSyntaxTree ss = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.STATEMENTS, RuleType.MULTI, ss, s); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= statement 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.STATEMENTS, RuleType.SINGLE, s); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // follow_statements ::= LBRACKET statements RBRACKET 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).value;
		 RESULT = new AbstractSyntaxTree(NodeType.FOLLOW_STATEMENTS, RuleType.MULTI, s); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("follow_statements",2, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // follow_statements ::= statement 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.FOLLOW_STATEMENTS, RuleType.SINGLE, s); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("follow_statements",2, ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // follow_statements ::= LBRACKET RBRACKET 
            {
              AbstractSyntaxTree RESULT =null;
		 RESULT = new AbstractSyntaxTree(NodeType.FOLLOW_STATEMENTS, RuleType.EMPTY); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("follow_statements",2, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= declaration_stmt SEMICOLON 
            {
              AbstractSyntaxTree RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).right;
		AbstractSyntaxTree d = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).value;
		 RESULT = new AbstractSyntaxTree(NodeType.STATEMENT, RuleType.DECLARE, d); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= assignment_stmt SEMICOLON 
            {
              AbstractSyntaxTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).right;
		AbstractSyntaxTree a = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).value;
		 RESULT = new AbstractSyntaxTree(NodeType.STATEMENT, RuleType.ASSIGNMENTS, a); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= BREAK SEMICOLON 
            {
              AbstractSyntaxTree RESULT =null;
		 RESULT = new AbstractSyntaxTree(NodeType.STATEMENT, RuleType.BREAK); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= CONTINUE SEMICOLON 
            {
              AbstractSyntaxTree RESULT =null;
		 RESULT = new AbstractSyntaxTree(NodeType.STATEMENT, RuleType.CONTINUE); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= PRINT LPAR disjunction RPAR SEMICOLON 
            {
              AbstractSyntaxTree RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).right;
		AbstractSyntaxTree d = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).value;
		 RESULT = new AbstractSyntaxTree(NodeType.STATEMENT, RuleType.PRINT, d); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-4)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= if_stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree i = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.STATEMENT, RuleType.IF, i); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= match_stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.STATEMENT, RuleType.SWITCH, s); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= while_stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree w = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.STATEMENT, RuleType.WHILE, w); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration_stmt ::= LET assignment_stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree a = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.DECLARATION, RuleType.DEFAULT, a); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // assignment_stmt ::= ID EQUAL disjunction 
            {
              AbstractSyntaxTree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree d = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 AbstractSyntaxTree idNode = new AbstractSyntaxTree(NodeType.ID, i);
                           RESULT = new AbstractSyntaxTree(NodeType.ASSIGNMENT, RuleType.DEFAULT, idNode, d); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",5, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // if_stmt ::= IF LPAR disjunction RPAR follow_statements ELSE follow_statements 
            {
              AbstractSyntaxTree RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-4)).right;
		AbstractSyntaxTree d = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-4)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).right;
		AbstractSyntaxTree f1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree f2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.IF, RuleType.DEFAULT, d, f1, f2); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("if_stmt",6, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-6)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // match_stmt ::= MATCH ID LBRACKET cases RBRACKET 
            {
              AbstractSyntaxTree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).right;
		AbstractSyntaxTree c = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).value;
		 AbstractSyntaxTree idNode = new AbstractSyntaxTree(NodeType.ID, i);
                           RESULT = new AbstractSyntaxTree(NodeType.SWITCH, RuleType.DEFAULT, idNode, c); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("match_stmt",7, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-4)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cases ::= options ARROW follow_statements COMMA cases 
            {
              AbstractSyntaxTree RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-4)).right;
		AbstractSyntaxTree o = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).right;
		AbstractSyntaxTree f = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree c = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.CASES, RuleType.MULTI, o, f, c); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("cases",8, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-4)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cases ::= DEFAULT ARROW follow_statements 
            {
              AbstractSyntaxTree RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree f = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.CASES, RuleType.DEFAULT, f); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("cases",8, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // options ::= options CASE_OR NUM 
            {
              AbstractSyntaxTree RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).right;
		AbstractSyntaxTree o = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 AbstractSyntaxTree numNode = new AbstractSyntaxTree(NodeType.NUM, n);
                           RESULT = new AbstractSyntaxTree(NodeType.OPTIONS, RuleType.MULTI, o, numNode); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("options",13, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // options ::= NUM 
            {
              AbstractSyntaxTree RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 AbstractSyntaxTree numNode = new AbstractSyntaxTree(NodeType.NUM, n);
                           RESULT = new AbstractSyntaxTree(NodeType.OPTIONS, RuleType.SINGLE, numNode);
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("options",13, ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // while_stmt ::= WHILE LPAR disjunction RPAR follow_statements 
            {
              AbstractSyntaxTree RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).right;
		AbstractSyntaxTree d = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree f = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.WHILE, RuleType.DEFAULT, d, f); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("while_stmt",9, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-4)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // disjunction ::= disjunction OR conjunction 
            {
              AbstractSyntaxTree RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).right;
		AbstractSyntaxTree d = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree c = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.DISJUNCTION, RuleType.MULTI, d, c); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("disjunction",10, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // disjunction ::= conjunction 
            {
              AbstractSyntaxTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree c = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.DISJUNCTION, RuleType.SINGLE, c); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("disjunction",10, ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // conjunction ::= conjunction AND inversion 
            {
              AbstractSyntaxTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).right;
		AbstractSyntaxTree c = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree i = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.CONJUNCTION, RuleType.MULTI, c, i); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("conjunction",11, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // conjunction ::= inversion 
            {
              AbstractSyntaxTree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree i = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.CONJUNCTION, RuleType.SINGLE, i); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("conjunction",11, ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inversion ::= NOT inversion 
            {
              AbstractSyntaxTree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree i = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.INVERSION, RuleType.MULTI, i); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("inversion",12, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inversion ::= comparison 
            {
              AbstractSyntaxTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree c = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.INVERSION, RuleType.SINGLE, c); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("inversion",12, ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comparison ::= eq_sum 
            {
              AbstractSyntaxTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.COMPARISON, RuleType.EQ, e); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("comparison",14, ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comparison ::= lt_sum 
            {
              AbstractSyntaxTree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree l = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.COMPARISON, RuleType.LT, l); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("comparison",14, ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comparison ::= gt_sum 
            {
              AbstractSyntaxTree RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree g = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.COMPARISON, RuleType.GT, g); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("comparison",14, ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comparison ::= sum 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.COMPARISON, RuleType.DEFAULT, s); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("comparison",14, ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // eq_sum ::= sum EQ sum 
            {
              AbstractSyntaxTree RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).right;
		AbstractSyntaxTree s1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree s2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.EQ, RuleType.DEFAULT, s1, s2); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("eq_sum",15, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lt_sum ::= sum LT sum 
            {
              AbstractSyntaxTree RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).right;
		AbstractSyntaxTree s1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree s2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.LT, RuleType.DEFAULT, s1, s2); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("lt_sum",16, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // gt_sum ::= sum GT sum 
            {
              AbstractSyntaxTree RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).right;
		AbstractSyntaxTree s1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree s2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.GT, RuleType.DEFAULT, s1, s2); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("gt_sum",17, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sum ::= sum PLUS term 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree t = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.SUM, RuleType.ADD, s, t); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("sum",18, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sum ::= sum MINUS term 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree t = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.SUM, RuleType.SUB, s, t); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("sum",18, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sum ::= term 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree t = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.SUM, RuleType.DEFAULT, t); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("sum",18, ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // term ::= term TIMES modulo 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).right;
		AbstractSyntaxTree t = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree m = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.TERM, RuleType.TIMES, t, m); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // term ::= term DIVIDES modulo 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).right;
		AbstractSyntaxTree t = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree m = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.TERM, RuleType.DIVIDES, t, m); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // term ::= modulo 
            {
              AbstractSyntaxTree RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree m = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.TERM, RuleType.DEFAULT, m); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // modulo ::= modulo MOD factor 
            {
              AbstractSyntaxTree RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).right;
		AbstractSyntaxTree m = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree f = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.MODULO, RuleType.MULTI, m, f); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("modulo",20, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // modulo ::= factor 
            {
              AbstractSyntaxTree RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree f = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.MODULO, RuleType.SINGLE, f); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("modulo",20, ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= PLUS primary 
            {
              AbstractSyntaxTree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree p = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.FACTOR, RuleType.POSITIVE, p); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= MINUS primary 
            {
              AbstractSyntaxTree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree p = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.FACTOR, RuleType.NEGATIVE, p); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= LPAR disjunction RPAR 
            {
              AbstractSyntaxTree RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).right;
		AbstractSyntaxTree d = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.elementAt(CUP$RustParser$top-1)).value;
		 RESULT = new AbstractSyntaxTree(NodeType.FACTOR, RuleType.PAR, d); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$RustParser$stack.elementAt(CUP$RustParser$top-2)), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= primary 
            {
              AbstractSyntaxTree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		AbstractSyntaxTree p = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 RESULT = new AbstractSyntaxTree(NodeType.FACTOR, RuleType.DEFAULT, p); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // primary ::= ID 
            {
              AbstractSyntaxTree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 AbstractSyntaxTree idNode = new AbstractSyntaxTree(NodeType.ID, i);
                           RESULT = new AbstractSyntaxTree(NodeType.PRIMARY, RuleType.VARIABLE, idNode); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("primary",22, ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // primary ::= NUM 
            {
              AbstractSyntaxTree RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$RustParser$stack.peek()).value;
		 AbstractSyntaxTree numNode = new AbstractSyntaxTree(NodeType.NUM, n);
                           RESULT = new AbstractSyntaxTree(NodeType.PRIMARY, RuleType.CONSTANT, numNode); 
              CUP$RustParser$result = parser.getSymbolFactory().newSymbol("primary",22, ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RustParser$stack.peek()), RESULT);
            }
          return CUP$RustParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$RustParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$RustParser$do_action(
    int                        CUP$RustParser$act_num,
    java_cup.runtime.lr_parser CUP$RustParser$parser,
    java.util.Stack            CUP$RustParser$stack,
    int                        CUP$RustParser$top)
    throws java.lang.Exception
    {
              return CUP$RustParser$do_action_part00000000(
                               CUP$RustParser$act_num,
                               CUP$RustParser$parser,
                               CUP$RustParser$stack,
                               CUP$RustParser$top);
    }
}

}
